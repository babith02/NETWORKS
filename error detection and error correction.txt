SOURCE CODE:	
CRC:
import java.util.*;
class CRC {   
    public static void main(String args[]) {  
        Scanner scan = new Scanner(System.in);   
        int size;
System.out.println("Enter the size of the data array: ");
        size = scan.nextInt();   
        int data[] = new int[size];  
System.out.println("Enter data bits in the array one by one: ");
for(int i = 0 ; i< size ; i++) {  
System.out.println("Enter bit " + (size-i) + ":");  
            data[i] = scan.nextInt();  
        }   
System.out.println("Enter the size of the divisor array:");
        size = scan.nextInt();   
        int divisor[] = new int[size];  
System.out.println("Enter divisor bits in the array one by one: ");
for(int i = 0 ; i< size ; i++) {  
System.out.println("Enter bit " + (size-i) + ":");  
            divisor[i] = scan.nextInt();  
        }  
        int rem[] = divideDataWithDivisor(data, divisor);  
for(int i = 0; i< rem.length-1; i++) {  
System.out.print(rem[i]);
        }  
System.out.println("\nGenerated CRC code is: ");

for(int i = 0; i<data.length; i++) {  
System.out.print(data[i]);
        }  
for(int i = 0; i< rem.length-1; i++) {  
System.out.print(rem[i]);
        }  
System.out.println();
        int sentData[] = new int[data.length + rem.length - 1];  
System.out.println("Enter bits in the array which you want to send: ");
for(int i = 0; i<sentData.length; i++) {  
System.out.println("Enter bit " +(sentData.length - 1)+ ":");  
sentData[i] = scan.nextInt();  
        }  
receiveData(sentData, divisor);  
    }  
    static int[] divideDataWithDivisor(int oldData[], int divisor[]) {  
        int rem[] = new int[divisor.length];  
        int i;
        int data[] = new int[oldData.length + divisor.length];  
System.arraycopy(oldData, 0, data, 0, oldData.length);
System.arraycopy(data, 0, rem, 0, divisor.length);  
for(i = 0; i<oldData.length; i++) {  
System.out.println((i+1) + ".) First data bit is : "+ rem[0]);  
System.out.print("Remainder : ");  
            if(rem[0] == 1) {   
for(int j = 1; j <divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], divisor[j]);
System.out.print(rem[j-1]);
                }  
            }  
            else {   
for(int j = 1; j <divisor.length; j++) {  
                    rem[j-1] = exorOperation(rem[j], 0);
System.out.print(rem[j-1]);
                }  
            }  
            rem[divisor.length-1] = data[i+divisor.length];  
System.out.println(rem[divisor.length-1]);  
        }  
        return rem;
    }  
    static int exorOperation(int x, int y) {   
if(x == y) {  
            return 0;
        }  
        return 1;
    }    
    static void receiveData(int data[], int divisor[]) {  
        int rem[] = divideDataWithDivisor(data, divisor);   
for(int i = 0; i<rem.length; i++) {  
            if(rem[i] != 0) {   
System.out.println("Currupted data received...");
return;
            }  
        }  
System.out.println("Data received without any error.");
    }  
}  


SOURCE CODE:
CHECKSUM SENDER:
import java.io.*;
import java.net.*;
import java.util.*;
public class Checksum_Sender
{
    private int MAX = 100;
    private Socket socket = null;
    private ServerSocket servsock = null;
    private DataInputStream dis = null;
    private DataOutputStream dos = null;
    public Checksum_Sender(int port) throws IOException
    {
servsock = new ServerSocket(port);
        socket = servsock.accept();
        dis = new DataInputStream(socket.getInputStream());
        dos = new DataOutputStream(socket.getOutputStream());
        while (true) 
        {
            int i, l, sum = 0, nob;
            Scanner sc = new Scanner(System.in);
System.out.println("Enter data length");
            l = sc.nextInt();
            int data[] = new int[MAX];
            int c_data[] = new int[MAX];
System.out.println("Enter data to send");
            for (i = 0; i< l; i++) 
            {
                data[i] = sc.nextInt();
                nob = (int)(Math.floor(Math.log(data[i]) / Math.log(2))) + 1;
c_data[i] = ((1 << nob) - 1) ^ data[i];
                sum += c_data[i];
            }
            data[i] = sum;
            l += 1;
System.out.println("Checksum Calculated is : " + sum);
System.out.println("Data being sent along with Checksum.....");
dos.writeInt(l);
            for (int j = 0; j < l; j++)
dos.writeInt(data[j]);
            if (dis.readUTF().equals("success")) 
            {   
System.out.println("Thanks for the feedback!! Message received Successfully!");
                break;}
            else if (dis.readUTF().equals("failure")) 
            {
System.out.println("Message was not received successfully!");
break;
            }  }
dis.close();
dos.close();
socket.close();  }
    public static void main(String args[]) throws IOException
    {
Checksum_Sender cs = new Checksum_Sender(5000);
    }}

CHECKSUM RECEIVER:
import java.net.*;
import java.io.*;
import java.util.*;
public class Checksum_Receiver {
private Socket s = null;
private DataInputStream dis = null;
private DataOutputStream dos = null;
public Checksum_Receiver(InetAddress ip,int port)throws IOException
{
s = new Socket(ip,port);		
dis = new DataInputStream(s.getInputStream());
dos = new DataOutputStream(s.getOutputStream());
while (true)
{ Scanner sc = new Scanner(System.in);
int i, l, nob, sum = 0, chk_sum;
l = dis.readInt();
int c_data[] = new int[l];
int data[] = new int[l];
System.out.println("Data received (along with checksum) is");		
for(i = 0; i<data.length; i++){ 
data[i] = dis.readInt();
System.out.println(data[i]);
nob = (int)(Math.floor(Math.log(data[i]) / Math.log(2))) + 1; 
c_data[i] = ((1 << nob) - 1) ^ data[i];
sum += c_data[i];}
System.out.println("Sum(in ones complement) is : "+sum);
nob = (int)(Math.floor(Math.log(sum) / Math.log(2))) + 1; 
sum = ((1 << nob) - 1) ^ sum;
System.out.println("Calculated Checksum is : "+sum);
if(sum == 0){ 
dos.writeUTF("success");
break;}	
else{
dos.writeUTF("failure");
break;}}
dis.close();
dos.close();
s.close();}
public static void main(String args[])throws IOException{ 
InetAddress ip = InetAddress.getLocalHost();
Checksum_Receiver cr = new Checksum_Receiver(ip,5000);
} 
}
