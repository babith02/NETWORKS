import java.util.*;

public class DijkstraAlgorithm {
    public static void main(String[] args) {
        // Create a sample graph with weights
        int V = 5; // Number of vertices
        List<List<Edge>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        // Add edges with weights
        addEdge(graph, 0, 1, 2);
        addEdge(graph, 0, 2, 4);
        addEdge(graph, 1, 2, 1);
        addEdge(graph, 1, 3, 7);
        addEdge(graph, 2, 4, 3);
        addEdge(graph, 3, 4, 2);

        int source = 0; // Source vertex
        int[] dist = dijkstra(graph, source, V);

        // Print the shortest distances from the source vertex
        for (int i = 0; i < V; i++) {
            System.out.println("Shortest distance from vertex " + source + " to vertex " + i + " is " + dist[i]);
        }
    }

    static class Edge {
        int destination;
        int weight;

        Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    static void addEdge(List<List<Edge>> graph, int source, int destination, int weight) {
        graph.get(source).add(new Edge(destination, weight));
        graph.get(destination).add(new Edge(source, weight)); // For undirected graph
    }

    static int[] dijkstra(List<List<Edge>> graph, int source, int V) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<Pair> minHeap = new PriorityQueue<>(Comparator.comparingInt(p -> p.distance));
        minHeap.offer(new Pair(source, 0));

        while (!minHeap.isEmpty()) {
            Pair current = minHeap.poll();

            int u = current.vertex;
            int uDist = current.distance;

            if (uDist > dist[u]) {
                continue;
            }

            for (Edge edge : graph.get(u)) {
                int v = edge.destination;
                int weight = edge.weight;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    minHeap.offer(new Pair(v, dist[v]));
                }
            }
        }

        return dist;
    }

    static class Pair {
        int vertex;
        int distance;

        Pair(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
    }
}
